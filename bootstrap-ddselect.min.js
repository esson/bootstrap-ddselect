/**
 * bootstrap-ddselect.js
 * v1.0
 *
 * By Martin Eriksson
 */
(function ($) { var DDSelect = (function () { function DDSelect(element, options) { var that = this; this.$select = $(element); this.$btnGroup = $(DDSelect.template); if (options.buttonClass) { this.$btnGroup.find(".btn").addClass(options.buttonClass) } if (options.sizeClass) { this.$btnGroup.find(".btn").addClass(options.sizeClass) } if (options.dropup) { this.$btnGroup.addClass("dropup") } this.$select.hide().after(this.$btnGroup); this.$btnGroup.find(".btn").on("click", function (e) { e.preventDefault() }); this.$select.on("change", function (e) { that.$btnGroup.find(".btn").first().text($(this).find(":selected").text()) }); this.refresh() } DDSelect.prototype.update = function () { var currentSelected = this.$select.find(":selected"); this.$btnGroup.find(".btn").first().text(currentSelected.text()); this.$btnGroup.find(".btn").toggleClass("disabled", this.$select.is(":disabled")) }; DDSelect.prototype.refeshOptions = function () { var that = this; this.$btnGroup.find(".dropdown-menu").empty(); function addOption($option, $parent) { var $link = $('<a href="" />').attr("data-value", $option.attr("value")).text($option.text()), $listItem = $("<li />").append($link); if ($option.is(":disabled")) { $listItem.addClass("disabled"); $link.attr("tabindex", "-1").attr("href", "#") } else { $link.on("click", function (e) { e.preventDefault(); $(this).parents(".btn-group").prev("select").val($(this).attr("data-value")); that.refresh() }) } $parent.append($listItem) } function addOptionGroup($optgroup, $parent) { var $submenu = $('<li class="dropdown-submenu"><a tabindex="-1" href="#">' + $optgroup.attr("label") + '</a><ul class="dropdown-menu"></ul></li>'); $optgroup.children("option").each(function () { addOption($(this), $submenu.children(".dropdown-menu")) }); $parent.append($submenu) } this.$select.children().each(function () { var $this = $(this); if ($this.is("optgroup")) { addOptionGroup($this, that.$btnGroup.children(".dropdown-menu")) } else { if ($this.is("option")) { addOption($this, that.$btnGroup.children(".dropdown-menu")) } } }) }; DDSelect.prototype.refresh = function () { this.update(); this.refeshOptions() }; DDSelect.prototype.getApi = function () { var that = this; return { refresh: function () { that.refresh() }, show: function () { that.$btnGroup.show() }, hide: function () { that.$btnGroup.hide() } } }; DDSelect.template = '<div class="btn-group"><button class="btn" data-toggle="dropdown"></button><button class="btn dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button><ul class="dropdown-menu"></ul></div>'; return DDSelect })(); $.fn.ddselect = function () { var options = {}, method = "", dataKey = "ddselect"; if (typeof arguments[0] === "string") { action = arguments[0] } else { options = arguments[0] } options = $.extend({}, $.fn.ddselect.defaultOptions, options); return this.each(function () { if (method) { var ddSelect = $(this).data(dataKey), api = null; if (ddSelect) { api = ddSelect.getApi(); if (api[method]) { api[method]() } else { $.error("Method " + method + " does not exist on jQuery.dropdownselect") } } } else { $(this).data(dataKey, new DDSelect(this, options)) } }) }; $.fn.ddselect.defaultOptions = { dropup: false, buttonClass: "", sizeClass: "" } })(jQuery);